# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - diagram-class-backend

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        # Repo root ya ES el backend; antes fallaba buscando backend/requirements.txt
        run: pip install -r requirements.txt

      # Aquí podrías agregar pruebas: python manage.py test

      - name: Generate build artifact (backend only)
        run: |
          set -e
          mkdir -p artifact
          # Copiar todo el código del backend (el root actual) excepto el propio directorio artifact y .git
          find . -maxdepth 1 -mindepth 1 \
            ! -name artifact \
            ! -name .git \
            -exec cp -R {} artifact/ \;
          chmod +x artifact/startup.sh || true
          # Limpieza de posibles entornos locales
          rm -rf artifact/venv artifact/.venv || true

      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: backend-package
          path: artifact

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    env:
      RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-package

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_BBF48D167B184163BEC9FEAB65EC87D6 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_0FC58018344C427D8FC14D9F16B06C54 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_B8BDEDB9405341D2B28D5BDBD9D54384 }}

      - name: Deploy to Azure Web App (Procfile + Daphne)
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'diagram-class-backend'
          slot-name: 'Production'
          package: '.'
          startup-command: 'daphne -b 0.0.0.0 -p 8000 diagram_backend.asgi:application'

      - name: Debug Procfile presence
        run: |
          echo "Contenido de Procfile desplegado (si existe):"
          (test -f Procfile && cat Procfile) || echo "NO encontrado"
          echo "Contenido de startup.sh (si existe):"
          (test -f startup.sh && head -20 startup.sh) || echo "startup.sh NO encontrado"

      - name: Forzar comando de arranque Daphne (startup.sh)
        if: env.RESOURCE_GROUP != ''
        continue-on-error: true
        uses: azure/CLI@v2
        with:
          inlineScript: |
            echo "RESOURCE_GROUP=${RESOURCE_GROUP}" 
            echo "Estableciendo STARTUP_COMMAND para usar startup.sh (Daphne) (si Procfile fue ignorado)" 
            az webapp config set \
              --resource-group $RESOURCE_GROUP \
              --name diagram-class-backend \
              --startup-file "bash startup.sh"
            echo "Mostrando configuración resultante:" \
            && az webapp config show --resource-group $RESOURCE_GROUP --name diagram-class-backend --query "{linuxFxVersion: linuxFxVersion, startupFile: siteConfig.appCommandLine}" -o json

      - name: Aviso falta de RESOURCE_GROUP
        if: env.RESOURCE_GROUP == ''
        run: |
          echo '---'
          echo 'No se definió el secret AZURE_RESOURCE_GROUP. Para forzar el startup command crea un secret con ese nombre (valor = nombre exacto del Resource Group) o configúralo manualmente en el Portal (Configuration > General Settings > Startup Command: bash startup.sh)'
          echo '---'

      - name: Show deployed files list (debug)
        run: |
          echo "Listing top-level deployed files:" || true
          ls -1
          